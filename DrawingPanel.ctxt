#BlueJ class context
comment0.target=DrawingPanel
comment0.text=\n\n\ DrawingPanel\ is\ a\ simplified\ Java\ drawing\ window\ class\ to\ accompany\n\ Building\ Java\ Programs\ textbook\ and\ associated\ materials.\n\ \n\ <p>\n\ Authors\:\ Marty\ Stepp\ (Stanford\ University)\ and\ Stuart\ Reges\ (University\ of\ Washington).\n\n\ <p>\n\ Version\:\ 4.05,\ 2016/09/07\ (to\ accompany\ BJP\ 4th\ edition).\n\ \n\ <p>\n\ You\ can\ always\ download\ the\ latest\ {@code\ DrawingPanel}\ from\n\ <a\ target\="_blank"\ href\="http\://www.buildingjavaprograms.com/drawingpanel/DrawingPanel.java">\n\ http\://www.buildingjavaprograms.com/drawingpanel/DrawingPanel.java</a>\ .\n\ \n\ <p>\n\ For\ more\ information\ and\ related\ materials,\ please\ visit\n\ <a\ target\="_blank"\ href\="http\://www.buildingjavaprograms.com">\n\ www.buildingjavaprograms.com</a>\ .\n\ \n\ <p>\n\ COMPATIBILITY\ NOTE\:\ This\ version\ of\ DrawingPanel\ requires\ Java\ 8\ or\ higher.\n\ To\ make\ this\ file\ work\ on\ Java\ 7\ and\ lower,\ you\ must\ make\ two\ small\n\ modifications\ to\ its\ source\ code.\n\ Search\ for\ the\ two\ occurrences\ of\ the\ annotation\ @FunctionalInterface\n\ and\ comment\ them\ out\ or\ remove\ those\ lines.\n\ Then\ the\ file\ should\ compile\ and\ run\ properly\ on\ older\ versions\ of\ Java.\n\ \n\ <h3>Description\:</h3>\n\ \n\ <p>\n\ The\ {@code\ DrawingPanel}\ class\ provides\ a\ simple\ interface\ for\ drawing\ persistent\n\ images\ using\ a\ {@code\ Graphics}\ object.\ \ An\ internal\ {@code\ BufferedImage}\ object\ is\ used\n\ to\ keep\ track\ of\ what\ has\ been\ drawn.\ \ A\ client\ of\ the\ class\ simply\n\ constructs\ a\ {@code\ DrawingPanel}\ of\ a\ particular\ size\ and\ then\ draws\ on\ it\ with\n\ the\ {@code\ Graphics}\ object,\ setting\ the\ background\ color\ if\ they\ so\ choose.\n\ </p>\n\ \n\ <p>\n\ The\ intention\ is\ that\ this\ custom\ library\ will\ mostly\ "stay\ out\ of\ the\ way"\n\ so\ that\ the\ client\ mostly\ interacts\ with\ a\ standard\ Java\ {@code\ java.awt.Graphics}\n\ object,\ and\ therefore\ most\ of\ the\ experience\ gained\ while\ using\ this\ library\n\ will\ transfer\ to\ Java\ graphics\ programming\ in\ other\ contexts.\n\ {@code\ DrawingPanel}\ is\ not\ intended\ to\ be\ a\ full\ rich\ graphical\ library\ for\ things\n\ like\ object-oriented\ drawing\ of\ shapes,\ animations,\ creating\ games,\ etc.\n\ </p>\n\ \n\ <h3>Example\ basic\ usage\:</h3>\n\ \n\ <p>\n\ Here\ is\ a\ canonical\ example\ of\ creating\ a\ {@code\ DrawingPanel}\ of\ a\ given\ size\ and\n\ using\ it\ to\ draw\ a\ few\ shapes.\n\ </p>\n\ \n\ <pre>\n\ //\ basic\ usage\ example\n\ DrawingPanel\ panel\ \=\ new\ DrawingPanel(600,\ 400);\n\ Graphics\ g\ \=\ panel.getGraphics();\n\ g.setColor(Color.RED);\n\ g.fillRect(17,\ 45,\ 139,\ 241);\n\ g.drawOval(234,\ 77,\ 100,\ 100);\n\ ...\n\ </pre>\n\ \n\ <p>\n\ To\ ensure\ that\ the\ image\ is\ always\ displayed,\ a\ timer\ calls\ repaint\ at\n\ regular\ intervals.\n\ </p>\n\ \n\ <h3>Pixel\ processing\ (new\ in\ BJP\ 4th\ edition)\:</h3>\n\ \n\ <p>\n\ This\ version\ of\ {@code\ DrawingPanel}\ allows\ you\ to\ loop\ over\ the\ pixels\ of\ an\ image.\n\ You\ can\ process\ each\ pixel\ as\ a\ {@code\ Color}\ object\ (easier\ OO\ interface,\ but\ takes\n\ more\ CPU\ and\ memory\ to\ run)\ or\ as\ a\ 32-bit\ RGB\ integer\ (clunkier\ to\ use,\ but\n\ much\ more\ efficient\ in\ runtime\ and\ memory\ usage).\n\ Look\ at\ the\ methods\ get/setPixel(s)\ to\ get\ a\ better\ idea.\n\ \n\ <pre>\n\ //\ example\ of\ horizontally\ flipping\ an\ image\n\ public\ static\ void\ flipHorizontal(DrawingPanel\ panel)\ {\n\ \ \ \ \ int\ width\ \ \=\ panel.getWidth();\n\ \ \ \ \ int\ height\ \=\ panel.getHeight();\n\ \ \ \ \ int[]\ pixels\ \=\ panel.getPixelsRGB();\n\ \ \ \ \ for\ (int\ row\ \=\ 0;\ row\ &lt;\ height;\ row++)\ {\n\ \ \ \ \ \ \ \ \ for\ (int\ col\ \=\ 0;\ col\ &lt;\ width\ /\ 2;\ col++)\ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ //\ swap\ this\ pixel\ with\ the\ one\ opposite\ it\n\ \ \ \ \ \ \ \ \ \ \ \ \ int\ col2\ \=\ width\ -\ 1\ -\ col;\n\ \ \ \ \ \ \ \ \ \ \ \ \ int\ temp\ \=\ pixels[row][col];\n\ \ \ \ \ \ \ \ \ \ \ \ \ pixels[row][col]\ \=\ pixels[row][col2];\n\ \ \ \ \ \ \ \ \ \ \ \ \ pixels[row][col2]\ \=\ temp;\n\ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ }\n\ \ \ \ \ panel.setPixels(pixels);\n\ }\n\ </pre>\n\ \n\ <h3>Event\ listeners\ and\ lambdas\ (new\ in\ BJP\ 4th\ edition)\:</h3>\n\ \n\ <p>\n\ With\ Java\ 8,\ you\ can\ now\ attach\ event\ handlers\ to\ listen\ to\ keyboard\ and\ mouse\n\ events\ that\ occur\ in\ a\ {@code\ DrawingPanel}\ using\ a\ lambda\ function.\ \ For\ example\:\n\ \n\ <pre>\n\ //\ example\ of\ attaching\ a\ mouse\ click\ handler\ using\ Java\ 8\n\ panel.onClick(\ (x,\ y)\ -&gt;\ System.out.println(x\ +\ "\ "\ +\ y)\ );\n\ </pre>\n\ \n\ <h3>Debugging\ facilities\ (new\ in\ BJP\ 4th\ edition)\:</h3>\n\ \n\ <p>\n\ This\ version\ now\ includes\ an\ inner\ class\ named\ {@code\ DebuggingGraphics}\n\ that\ keeps\ track\ of\ how\ many\ times\ various\ drawing\ methods\ are\ called.\n\ It\ includes\ a\ {@code\ showCounts}\ method\ for\ the\ {@code\ DrawingPanel}\ itself\n\ that\ allows\ a\ client\ to\ examine\ this.\ \ The\ panel\ will\ record\ basic\ drawing\n\ methods\ performed\ by\ a\ version\ of\ the\ {@code\ Graphics}\ class\ obtained\ by\n\ calling\ {@code\ getDebuggingGraphics}\ \:\n\ \n\ <pre>\n\ //\ example\ of\ debugging\ counts\ of\ graphics\ method\ calls\n\ Graphics\ g\ \=\ panel.getDebuggingGraphics();\n\ </pre>\n\ \n\ <p>\n\ Novices\ will\ be\ encouraged\ to\ simply\ print\ it\ at\ the\ end\ of\ {@code\ main},\ as\ in\:\n\ \n\ <pre>\n\ System.out.println(panel.getCounts());\n\ </pre>\n\ \n\ <h3>History\ and\ recent\ changes\:</h3>\n\ \n\ 2016/07/25\n\ -\ Added\ and\ cleaned\ up\ BJP4\ features,\ static\ anti-alias\ settings,\ bug\ fixes.\n\ <p>\n\ \n\ 2016/03/07\n\ -\ Code\ cleanup\ and\ improvements\ to\ JavaDoc\ comments\ for\ BJP4\ release.\n\ <p>\n\ \n\ 2015/09/04\n\ -\ Now\ includes\ methods\ for\ get/setting\ individual\ pixels\ and\ all\ pixels\ on\ the\n\ \ \ drawing\ panel.\ \ This\ helps\ facilitate\ 2D\ array-based\ pixel-processing\n\ \ \ exercises\ and\ problems\ for\ Building\ Java\ Programs,\ 4th\ edition.\n\ -\ Code\ cleanup\ and\ reorganization.\n\ \ \ Now\ better\ alphabetization/formatting\ of\ members\ and\ encapsulation.\n\ \ \ Commenting\ also\ augmented\ throughout\ code.\n\ <p>\n\ \n\ 2015/04/09\n\ -\ Now\ includes\ a\ DebuggingGraphics\ inner\ class\ that\ keeps\ track\ of\ how\ many\n\ \ \ times\ various\ drawing\ methods\ are\ called.\n\ \ \ All\ additions\ are\ commented\ (search\ for\ "DebuggingGraphics")\n\ <p>\n\ \n\ 2011/10/25\n\ -\ save\ zoomed\ images\ (2011/10/25)\n\ <p>\n\ \n\ 2011/10/21\n\ -\ window\ no\ longer\ moves\ when\ zoom\ changes\n\ -\ grid\ lines\n\ \n\ @author\ Marty\ Stepp,\ Stanford\ University,\ and\ Stuart\ Reges,\ University\ of\ Washington\n\ @version\ 4.05,\ 2016/09/07\ (BJP\ 4th\ edition)\n
comment1.params=
comment1.target=void\ checkAnimationSettings()
comment1.text=\n\ Called\ when\ DrawingPanel\ class\ loads\ up.\n\ Checks\ whether\ the\ user\ wants\ to\ save\ an\ animation\ to\ a\ file.\n
comment10.params=name
comment10.target=boolean\ hasProperty(java.lang.String)
comment10.text=\n\ Returns\ whether\ the\ given\ Java\ system\ property\ has\ been\ set.\n
comment100.params=visible
comment100.target=void\ setVisible(boolean)
comment100.text=\n\ Show\ or\ hide\ the\ drawing\ panel\ on\ the\ screen.\n\ @param\ visible\ true\ to\ show,\ false\ to\ hide\n
comment101.params=width
comment101.target=void\ setWidth(int)
comment101.text=\n\ Sets\ the\ drawing\ panel's\ width\ in\ pixels\ to\ the\ given\ value.\n\ After\ calling\ this\ method,\ the\ client\ must\ call\ getGraphics()\ again\n\ to\ get\ the\ new\ graphics\ context\ of\ the\ newly\ enlarged\ image\ buffer.\n\ @param\ width\ width,\ in\ pixels\n\ @throws\ IllegalArgumentException\ if\ height\ is\ negative\ or\ exceeds\ MAX_SIZE\n
comment102.params=
comment102.target=boolean\ shouldDiff()
comment102.text=\n\ Returns\ whether\ the\ user\ wants\ to\ perform\ a\ 'diff'\ comparison\ of\ their\n\ drawing\ panel\ with\ a\ given\ expected\ output\ image.\n
comment103.params=
comment103.target=boolean\ shouldSave()
comment103.text=\n\ Returns\ whether\ the\ user\ wants\ to\ save\ the\ drawing\ panel\ contents\ to\n\ a\ file\ automatically.\n
comment104.params=parent\ title\ message\ names
comment104.target=int\ showOptionDialog(java.awt.Frame,\ java.lang.String,\ java.lang.String,\ java.lang.String[])
comment104.text=\n\ Shows\ a\ dialog\ box\ with\ the\ given\ choices;\n\ returns\ the\ index\ chosen\ (-1\ \=\=\ canceled).\n
comment105.params=e
comment105.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment106.params=e
comment106.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment107.params=millis
comment107.target=void\ sleep(int)
comment107.text=\n\ Causes\ the\ program\ to\ pause\ for\ the\ given\ amount\ of\ time\ in\ milliseconds.\n\ This\ allows\ for\ animation\ by\ calling\ pause\ in\ a\ loop.\n\ If\ the\ DrawingPanel\ is\ not\ showing\ on\ the\ screen,\ has\ no\ effect.\n\ @param\ millis\ number\ of\ milliseconds\ to\ sleep\n\ @throws\ IllegalArgumentException\ if\ a\ negative\ number\ of\ ms\ is\ passed\n
comment108.params=
comment108.target=void\ toFront()
comment108.text=\n\ Moves\ the\ drawing\ panel\ window\ on\ top\ of\ other\ windows\ so\ it\ can\ be\ seen.\n
comment109.params=window
comment109.target=void\ toFront(java.awt.Window)
comment109.text=\n\ Brings\ the\ given\ window\ to\ the\ front\ of\ the\ Z-ordering.\n
comment11.params=
comment11.target=boolean\ isAntiAliasDefault()
comment11.text=\n\ Returns\ true\ if\ DrawingPanel\ instances\ should\ anti-alias\ (smooth)\ their\ graphics.\n\ By\ default\ this\ is\ true,\ but\ it\ can\ be\ set\ to\ false\ using\ the\ ANTIALIAS_PROPERTY.\n\ @return\ true\ if\ anti-aliasing\ is\ enabled\ (default\ true)\n
comment110.params=
comment110.target=void\ run()
comment111.params=zoomFactor
comment111.target=void\ zoom(int)
comment111.text=\n\ Zooms\ the\ drawing\ panel\ in/out\ to\ the\ given\ factor.\n\ A\ zoom\ factor\ of\ 1,\ the\ default,\ indicates\ normal\ size.\n\ A\ zoom\ factor\ of\ 2\ would\ indicate\ 200%\ size,\ and\ so\ on.\n\ The\ factor\ value\ passed\ should\ be\ at\ least\ 1;\ if\ not,\ 1\ will\ be\ used.\n\ @param\ zoomFactor\ the\ zoom\ factor\ to\ use\ (1\ or\ greater)\n
comment112.params=s\ os
comment112.target=void\ putAscii(java.lang.String,\ java.io.OutputStream)
comment112.text=\n\ Internal\ method;\n\ write\ just\ the\ low\ bytes\ of\ a\ String.\ (This\ sucks,\ but\ the\ concept\ of\ an\n\ encoding\ seems\ inapplicable\ to\ a\ binary\ file\ ID\ string.\ I\ would\ think\n\ flexibility\ is\ just\ what\ we\ don't\ want\ -\ but\ then\ again,\ maybe\ I'm\ slow.)\n\ This\ is\ an\ internal\ method\ not\ meant\ to\ be\ called\ by\ clients.\n
comment113.params=i16\ os
comment113.target=void\ putShort(int,\ java.io.OutputStream)
comment113.text=\n\ Internal\ method;\n\ write\ a\ 16-bit\ integer\ in\ little\ endian\ byte\ order.\n\ This\ is\ an\ internal\ method\ not\ meant\ to\ be\ called\ by\ clients.\n
comment12.params=
comment12.target=boolean\ isHeadless()
comment12.text=\n\ Returns\ true\ if\ the\ class\ is\ in\ "headless"\ mode,\ meaning\ that\ it\ is\ running\ on\n\ a\ server\ without\ a\ graphical\ user\ interface.\n\ @return\ true\ if\ we\ are\ in\ headless\ mode\ (default\ false)\n
comment13.params=
comment13.target=boolean\ mainIsActive()
comment13.text=\n\ Internal\ method;\ returns\ whether\ the\ 'main'\ thread\ is\ still\ running.\n\ Used\ to\ determine\ whether\ to\ exit\ the\ program\ when\ the\ drawing\ panel\n\ is\ closed\ by\ the\ user.\n\ This\ is\ an\ internal\ method\ not\ meant\ to\ be\ called\ by\ clients.\n\ @return\ true\ if\ main\ thread\ is\ still\ running\n
comment14.params=name
comment14.target=boolean\ propertyIsTrue(java.lang.String)
comment14.text=\n\ Returns\ whether\ the\ given\ Java\ system\ property\ has\ been\ set\ to\ a\n\ "truthy"\ value\ such\ as\ "yes"\ or\ "true"\ or\ "1".\ \n
comment15.params=
comment15.target=void\ saveAll()
comment15.text=\n\ Saves\ every\ DrawingPanel\ instance\ that\ is\ active.\n\ @throws\ IOException\ if\ unable\ to\ save\ any\ of\ the\ files.\n
comment16.params=value
comment16.target=void\ setAntiAliasDefault(java.lang.Boolean)
comment16.text=\n\ Sets\ whether\ DrawingPanel\ instances\ should\ anti-alias\ (smooth)\ their\ pixels\ by\ default.\n\ Default\ true.\ \ You\ can\ set\ this\ on\ a\ given\ DrawingPanel\ instance\ with\ setAntialias(boolean).\n\ @param\ value\ whether\ to\ enable\ anti-aliasing\ (default\ true)\n
comment17.params=value
comment17.target=void\ setHeadless(java.lang.Boolean)
comment17.text=\n\ Sets\ the\ class\ to\ run\ in\ "headless"\ mode,\ with\ no\ graphical\ output\ on\ screen.\n\ @param\ value\ whether\ to\ enable\ headless\ mode\ (default\ false)\n
comment18.params=file
comment18.target=void\ setSaveFile(java.io.File)
comment18.text=\n\ Sets\ the\ file\ to\ be\ used\ when\ saving\ graphical\ output\ for\ all\ DrawingPanels.\n\ @param\ file\ the\ file\ to\ use\ as\ default\ save\ file\n
comment19.params=filename
comment19.target=void\ setSaveFileName(java.lang.String)
comment19.text=\n\ Sets\ the\ filename\ to\ be\ used\ when\ saving\ graphical\ output\ for\ all\ DrawingPanels.\n\ @param\ filename\ the\ name/path\ of\ the\ file\ to\ use\ as\ default\ save\ file\n
comment2.params=name\ value\ min\ max
comment2.target=void\ ensureInRange(java.lang.String,\ int,\ int,\ int)
comment2.text=\n\ Helper\ that\ throws\ an\ IllegalArgumentException\ if\ the\ given\ integer\n\ is\ not\ between\ the\ given\ min-max\ inclusive\n
comment20.params=r\ g\ b
comment20.target=int\ toRgbInteger(int,\ int,\ int)
comment20.text=\n\ Returns\ an\ RGB\ integer\ made\ from\ the\ given\ red,\ green,\ and\ blue\ components\n\ from\ 0-255.\ \ The\ returned\ integer\ is\ suitable\ for\ use\ with\ various\ RGB\n\ integer\ methods\ in\ this\ class\ such\ as\ setPixel.\n\ @param\ r\ red\ component\ from\ 0-255\ (bits\ 8-15)\n\ @param\ g\ green\ component\ from\ 0-255\ (bits\ 16-23)\n\ @param\ b\ blue\ component\ from\ 0-255\ (bits\ 24-31)\n\ @return\ RGB\ integer\ with\ full\ 255\ for\ alpha\ and\ r-g-b\ in\ bits\ 8-31\n\ @throws\ IllegalArgumentException\ if\ r,\ g,\ or\ b\ is\ not\ in\ 0-255\ range\n
comment21.params=alpha\ r\ g\ b
comment21.target=int\ toRgbInteger(int,\ int,\ int,\ int)
comment21.text=\n\ Returns\ an\ RGB\ integer\ made\ from\ the\ given\ alpha,\ red,\ green,\ and\ blue\ components\n\ from\ 0-255.\ \ The\ returned\ integer\ is\ suitable\ for\ use\ with\ various\ RGB\n\ integer\ methods\ in\ this\ class\ such\ as\ setPixel.\n\ @param\ alpha\ alpha\ (transparency)\ component\ from\ 0-255\ (bits\ 0-7)\n\ @param\ r\ red\ component\ from\ 0-255\ (bits\ 8-15)\n\ @param\ g\ green\ component\ from\ 0-255\ (bits\ 16-23)\n\ @param\ b\ blue\ component\ from\ 0-255\ (bits\ 24-31)\n\ @return\ RGB\ integer\ with\ the\ given\ four\ components\n\ @throws\ IllegalArgumentException\ if\ alpha,\ r,\ g,\ or\ b\ is\ not\ in\ 0-255\ range\n
comment22.params=
comment22.target=boolean\ usingDrJava()
comment22.text=\n\ Returns\ whether\ the\ current\ program\ is\ running\ in\ the\ DrJava\ editor.\n\ This\ was\ needed\ in\ the\ past\ because\ DrJava\ messed\ with\ some\ settings.\n
comment23.params=
comment23.target=DrawingPanel()
comment23.text=\n\ Constructs\ a\ drawing\ panel\ with\ a\ default\ width\ and\ height\ enclosed\ in\ a\ window.\n\ Uses\ DEFAULT_WIDTH\ and\ DEFAULT_HEIGHT\ for\ the\ panel's\ size.\n
comment24.params=width\ height
comment24.target=DrawingPanel(int,\ int)
comment24.text=\n\ Constructs\ a\ drawing\ panel\ of\ given\ width\ and\ height\ enclosed\ in\ a\ window.\n\ @param\ width\ panel's\ width\ in\ pixels\n\ @param\ height\ panel's\ height\ in\ pixels\n
comment25.params=
comment25.target=void\ run()
comment26.params=
comment26.target=void\ run()
comment27.params=imageFile
comment27.target=DrawingPanel(java.io.File)
comment27.text=\n\ Constructs\ a\ drawing\ panel\ that\ displays\ the\ image\ from\ the\ given\ file\ enclosed\ in\ a\ window.\n\ The\ panel\ will\ be\ sized\ exactly\ to\ fit\ the\ image\ inside\ it.\n\ @param\ imageFile\ the\ image\ file\ to\ load\n\ @throws\ RuntimeException\ if\ the\ image\ file\ is\ not\ found\n
comment28.params=imageFileName
comment28.target=DrawingPanel(java.lang.String)
comment28.text=\n\ Constructs\ a\ drawing\ panel\ that\ displays\ the\ image\ from\ the\ given\ file\ name\ enclosed\ in\ a\ window.\n\ The\ panel\ will\ be\ sized\ exactly\ to\ fit\ the\ image\ inside\ it.\n\ @param\ imageFileName\ the\ file\ name/path\ of\ the\ image\ file\ to\ load\n\ @throws\ RuntimeException\ if\ the\ image\ file\ is\ not\ found\n
comment29.params=listener
comment29.target=void\ addKeyListener(java.awt.event.KeyListener)
comment29.text=\n\ Adds\ the\ given\ event\ listener\ to\ respond\ to\ key\ events\ on\ this\ panel.\n\ @param\ listener\ the\ key\ event\ listener\ to\ attach\n
comment3.params=name\ value
comment3.target=void\ ensureNotNull(java.lang.String,\ java.lang.Object)
comment3.text=\n\ Helper\ that\ throws\ a\ NullPointerException\ if\ the\ given\ value\ is\ null\ \n
comment30.params=listener
comment30.target=void\ addMouseListener(java.awt.event.MouseListener)
comment30.text=\n\ Adds\ the\ given\ event\ listener\ to\ respond\ to\ mouse\ events\ on\ this\ panel.\n\ @param\ listener\ the\ mouse\ event\ listener\ to\ attach\n
comment31.params=
comment31.target=boolean\ autoEnableAnimationOnSleep()
comment31.text=\n\ Whether\ the\ panel\ should\ automatically\ switch\ to\ animated\ mode\n\ if\ it\ calls\ the\ sleep\ method.\n
comment32.params=frame
comment32.target=void\ center(java.awt.Window)
comment32.text=\n\ Moves\ the\ given\ JFrame\ to\ the\ center\ of\ the\ screen.\n
comment33.params=
comment33.target=void\ checkChooser()
comment33.text=\n\ Constructs\ and\ initializes\ our\ JFileChooser\ field\ if\ necessary.\n
comment34.params=
comment34.target=void\ clear()
comment34.text=\n\ Erases\ all\ drawn\ shapes/lines/colors\ from\ the\ panel.\n
comment35.params=
comment35.target=void\ compareToFile()
comment35.text=\n\ Compares\ the\ current\ DrawingPanel\ image\ to\ an\ image\ file\ on\ disk.\n
comment36.params=
comment36.target=void\ compareToURL()
comment36.text=\n\ Compares\ the\ current\ DrawingPanel\ image\ to\ an\ image\ file\ on\ the\ web.\n
comment37.params=
comment37.target=void\ exit()
comment37.text=\n\ Closes\ the\ DrawingPanel\ and\ exits\ the\ program.\n
comment38.params=
comment38.target=java.lang.String\ getCallingClassName()
comment38.text=\n\ Returns\ a\ best\ guess\ about\ the\ name\ of\ the\ class\ that\ constructed\ this\ panel.\n
comment39.params=
comment39.target=java.util.Map\ getCounts()
comment39.text=\n\ Returns\ a\ map\ of\ counts\ of\ occurrences\ of\ calls\ of\ various\ drawing\ methods.\n\ You\ can\ print\ this\ map\ to\ see\ how\ many\ times\ your\ graphics\ methods\ have\n\ been\ called\ to\ aid\ in\ debugging.\n\ @return\ map\ of\ {method\ name,\ count}\ pairs\n
comment4.params=rgb
comment4.target=int\ getAlpha(int)
comment4.text=\n\ Returns\ the\ alpha\ (opacity)\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\n\ @param\ rgb\ RGB\ integer\ with\ alpha\ in\ bits\ 0-7,\ red\ in\ bits\ 8-15,\ green\ in\n\ bits\ 16-23,\ and\ blue\ in\ bits\ 24-31\n\ @return\ alpha\ component\ from\ 0-255\n
comment40.params=
comment40.target=java.awt.Graphics\ getDebuggingGraphics()
comment40.text=\n\ A\ variation\ of\ getGraphics\ that\ returns\ an\ object\ that\ records\n\ a\ count\ for\ various\ drawing\ methods.\n\ See\ also\:\ getCounts\n\ @return\ debug\ Graphics\ object\n
comment41.params=
comment41.target=java.awt.Graphics2D\ getGraphics()
comment41.text=\n\ Obtain\ the\ Graphics\ object\ to\ draw\ on\ the\ panel.\n\ @return\ panel's\ Graphics\ object\n
comment42.params=
comment42.target=java.awt.image.BufferedImage\ getImage()
comment42.text=\n\ Creates\ the\ buffered\ image\ for\ drawing\ on\ this\ panel.\n
comment43.params=
comment43.target=int\ getHeight()
comment43.text=\n\ Returns\ the\ drawing\ panel's\ height\ in\ pixels.\n\ @return\ drawing\ panel's\ height\ in\ pixels\n
comment44.params=x\ y
comment44.target=java.awt.Color\ getPixel(int,\ int)
comment44.text=\n\ Returns\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ as\ a\ Color\ object.\n\ If\ nothing\ has\ been\ explicitly\ drawn\ on\ this\ particular\ pixel,\ the\ panel's\n\ background\ color\ is\ returned.\n\ @param\ x\ x-coordinate\ of\ pixel\ to\ retrieve\n\ @param\ y\ y-coordinate\ of\ pixel\ to\ retrieve\n\ @return\ pixel\ (x,\ y)\ color\ as\ a\ Color\ object\n\ @throws\ IllegalArgumentException\ if\ (x,\ y)\ is\ out\ of\ range\n
comment45.params=x\ y
comment45.target=int\ getPixelRGB(int,\ int)
comment45.text=\n\ Returns\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ as\ an\ RGB\ integer.\n\ The\ individual\ red,\ green,\ and\ blue\ components\ of\ the\ RGB\ integer\ can\ be\n\ extracted\ from\ this\ by\ calling\ DrawingPanel.getRed,\ getGreen,\ and\ getBlue.\n\ If\ nothing\ has\ been\ explicitly\ drawn\ on\ this\ particular\ pixel,\ the\ panel's\n\ background\ color\ is\ returned.\n\ See\ also\:\ getPixel.\n\ @param\ x\ x-coordinate\ of\ pixel\ to\ retrieve\n\ @param\ y\ y-coordinate\ of\ pixel\ to\ retrieve\n\ @return\ pixel\ (x,\ y)\ color\ as\ an\ RGB\ integer\n\ @throws\ IllegalArgumentException\ if\ (x,\ y)\ is\ out\ of\ range\n
comment46.params=
comment46.target=java.awt.Color[][]\ getPixels()
comment46.text=\n\ Returns\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ as\ a\ 2-D\ array\n\ of\ Color\ objects.\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\n\ @return\ 2D\ array\ of\ colors\ (row-major)\n
comment47.params=
comment47.target=int[][]\ getPixelsRGB()
comment47.text=\n\ Returns\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ as\ a\ 2-D\ array\n\ of\ RGB\ integers.\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\n\ The\ individual\ red,\ green,\ and\ blue\ components\ of\ each\ RGB\ integer\ can\ be\n\ extracted\ from\ this\ by\ calling\ DrawingPanel.getRed,\ getGreen,\ and\ getBlue.\n\ @return\ 2D\ array\ of\ RGB\ integers\ (row-major)\n
comment48.params=
comment48.target=java.awt.Dimension\ getSize()
comment48.text=\n\ Returns\ the\ drawing\ panel's\ pixel\ size\ (width,\ height)\ as\ a\ Dimension\ object.\n\ @return\ panel's\ size\n
comment49.params=
comment49.target=int\ getWidth()
comment49.text=\n\ Returns\ the\ drawing\ panel's\ width\ in\ pixels.\n\ @return\ panel's\ width\n
comment5.params=rgb
comment5.target=int\ getBlue(int)
comment5.text=\n\ Returns\ the\ blue\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\n\ @param\ rgb\ RGB\ integer\ with\ alpha\ in\ bits\ 0-7,\ red\ in\ bits\ 8-15,\ green\ in\n\ bits\ 16-23,\ and\ blue\ in\ bits\ 24-31\n\ @return\ blue\ component\ from\ 0-255\n
comment50.params=
comment50.target=int\ getX()
comment50.text=\n\ Returns\ the\ drawing\ panel's\ x-coordinate\ on\ the\ screen.\n\ @return\ panel's\ x-coordinate\n
comment51.params=
comment51.target=int\ getY()
comment51.text=\n\ Returns\ the\ drawing\ panel's\ y-coordinate\ on\ the\ screen.\n\ @return\ panel's\ y-coordinate\n
comment52.params=
comment52.target=int\ getZoom()
comment52.text=\n\ Returns\ the\ drawing\ panel's\ current\ zoom\ factor.\n\ Initially\ this\ is\ 1\ to\ indicate\ 100%\ zoom,\ the\ original\ size.\n\ A\ factor\ of\ 2\ would\ indicate\ 200%\ zoom,\ and\ so\ on.\n\ @return\ zoom\ factor\ (default\ 1)\n
comment53.params=img\ infoflags\ x\ y\ width\ height
comment53.target=boolean\ imageUpdate(java.awt.Image,\ int,\ int,\ int,\ int,\ int)
comment53.text=\n\ Internal\ method;\n\ notifies\ the\ panel\ when\ images\ are\ loaded\ and\ updated.\n\ This\ is\ a\ required\ method\ of\ ImageObserver\ interface.\n\ This\ is\ an\ internal\ method\ not\ meant\ to\ be\ called\ by\ clients.\n\ @param\ img\ internal\ method;\ do\ not\ call\n\ @param\ infoflags\ internal\ method;\ do\ not\ call\n\ @param\ x\ internal\ method;\ do\ not\ call\n\ @param\ y\ internal\ method;\ do\ not\ call\n\ @param\ width\ internal\ method;\ do\ not\ call\n\ @param\ height\ internal\ method;\ do\ not\ call\n
comment54.params=
comment54.target=void\ initializeAnimation()
comment54.text=\n\ Sets\ up\ state\ for\ drawing\ and\ saving\ frames\ of\ animation\ to\ a\ GIF\ image.\n
comment55.params=
comment55.target=boolean\ isAnimated()
comment55.text=\n\ Returns\ whether\ this\ drawing\ panel\ is\ in\ animation\ mode.\n
comment56.params=
comment56.target=boolean\ isGraphical()
comment56.text=\n\ Returns\ whether\ this\ drawing\ panel\ is\ going\ to\ be\ displayed\ on\ screen.\n\ This\ is\ almost\ always\ true\ except\ in\ some\ server\ environments\ where\n\ the\ DrawingPanel\ is\ run\ 'headless'\ without\ a\ GUI,\ often\ for\ scripting\n\ and\ automation\ purposes.\n
comment57.params=
comment57.target=boolean\ isMultiple()
comment57.text=\n\ Returns\ true\ if\ the\ drawing\ panel\ class\ is\ in\ multiple\ mode.\n\ This\ would\ be\ true\ if\ the\ current\ program\ pops\ up\ several\ drawing\ panels\n\ and\ we\ want\ to\ save\ the\ state\ of\ each\ of\ them\ to\ a\ different\ file.\n
comment58.params=file
comment58.target=java.awt.Image\ loadImage(java.io.File)
comment58.text=\n\ Loads\ an\ image\ from\ the\ given\ file\ on\ disk\ and\ returns\ it\n\ as\ an\ Image\ object.\n\ @param\ file\ the\ file\ to\ load\n\ @return\ loaded\ image\ object\n\ @throws\ NullPointerException\ if\ filename\ is\ null\n\ @throws\ RuntimeException\ if\ the\ given\ file\ is\ not\ found\n
comment59.params=filename
comment59.target=java.awt.Image\ loadImage(java.lang.String)
comment59.text=\n\ Loads\ an\ image\ from\ the\ given\ file\ on\ disk\ and\ returns\ it\n\ as\ an\ Image\ object.\n\ @param\ filename\ name/path\ of\ the\ file\ to\ load\n\ @return\ loaded\ image\ object\n\ @throws\ NullPointerException\ if\ filename\ is\ null\n\ @throws\ RuntimeException\ if\ the\ given\ file\ is\ not\ found\n
comment6.params=rgb
comment6.target=int\ getGreen(int)
comment6.text=\n\ Returns\ the\ green\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\n\ @param\ rgb\ RGB\ integer\ with\ alpha\ in\ bits\ 0-7,\ red\ in\ bits\ 8-15,\ green\ in\n\ bits\ 16-23,\ and\ blue\ in\ bits\ 24-31\n\ @return\ green\ component\ from\ 0-255\n
comment60.params=e
comment60.target=void\ onClick(DrawingPanel.DPMouseEventHandler)
comment60.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ clicks.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ click\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment61.params=e
comment61.target=void\ onDrag(DrawingPanel.DPMouseEventHandler)
comment61.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ drags.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ drag\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment62.params=e
comment62.target=void\ onEnter(DrawingPanel.DPMouseEventHandler)
comment62.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ enters.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ enter\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment63.params=e
comment63.target=void\ onExit(DrawingPanel.DPMouseEventHandler)
comment63.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ exits.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ exit\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment64.params=e
comment64.target=void\ onKeyDown(DrawingPanel.DPKeyEventHandler)
comment64.text=\n\ Adds\ an\ event\ handler\ for\ key\ presses.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ key\ press\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment65.params=e
comment65.target=void\ onKeyUp(DrawingPanel.DPKeyEventHandler)
comment65.text=\n\ Adds\ an\ event\ handler\ for\ key\ releases.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ key\ release\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment66.params=e
comment66.target=void\ onMouseClick(DrawingPanel.DPMouseEventHandler)
comment66.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ clicks.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ click\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment67.params=e
comment67.target=void\ onMouseDown(DrawingPanel.DPMouseEventHandler)
comment67.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ button\ down\ events.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ button\ down\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment68.params=e
comment68.target=void\ onMouseDrag(DrawingPanel.DPMouseEventHandler)
comment68.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ drags.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ drag\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment69.params=e
comment69.target=void\ onMouseEnter(DrawingPanel.DPMouseEventHandler)
comment69.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ enters.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ enter\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment7.params=rgb
comment7.target=int\ getRed(int)
comment7.text=\n\ Returns\ the\ red\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\n\ @param\ rgb\ RGB\ integer\ with\ alpha\ in\ bits\ 0-7,\ red\ in\ bits\ 8-15,\ green\ in\n\ bits\ 16-23,\ and\ blue\ in\ bits\ 24-31\n\ @return\ red\ component\ from\ 0-255\n
comment70.params=e
comment70.target=void\ onMouseExit(DrawingPanel.DPMouseEventHandler)
comment70.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ exits.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ exit\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment71.params=e
comment71.target=void\ onMouseMove(DrawingPanel.DPMouseEventHandler)
comment71.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ movement.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ move\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment72.params=e
comment72.target=void\ onMouseUp(DrawingPanel.DPMouseEventHandler)
comment72.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ button\ up\ events.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ button\ up\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment73.params=e
comment73.target=void\ onMove(DrawingPanel.DPMouseEventHandler)
comment73.text=\n\ Adds\ an\ event\ handler\ for\ mouse\ movement.\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ move\ event\ occurs.\n\ @param\ e\ event\ handler\ function\ to\ call\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\n
comment74.params=
comment74.target=boolean\ readyToClose()
comment74.text=\n\ Returns\ whether\ the\ drawing\ panel\ should\ be\ closed\ and\ the\ program\n\ should\ be\ shut\ down.\n
comment75.params=image\ oldColor\ newColor
comment75.target=void\ replaceColor(java.awt.image.BufferedImage,\ java.awt.Color,\ java.awt.Color)
comment75.text=\n\ Replaces\ all\ occurrences\ of\ the\ given\ old\ color\ with\ the\ given\ new\ color.\n
comment76.params=file
comment76.target=void\ save(java.io.File)
comment76.text=\n\ Takes\ the\ current\ contents\ of\ the\ drawing\ panel\ and\ writes\ them\ to\n\ the\ given\ file.\n\ @param\ file\ the\ file\ to\ save\n\ @throws\ NullPointerException\ if\ filename\ is\ null\n\ @throws\ IOException\ if\ the\ given\ file\ cannot\ be\ written\n
comment77.params=filename
comment77.target=void\ save(java.lang.String)
comment77.text=\n\ Takes\ the\ current\ contents\ of\ the\ drawing\ panel\ and\ writes\ them\ to\n\ the\ given\ file.\n\ @param\ filename\ name/path\ of\ the\ file\ to\ save\n\ @throws\ NullPointerException\ if\ filename\ is\ null\n\ @throws\ IOException\ if\ the\ given\ file\ cannot\ be\ written\n
comment78.params=file
comment78.target=void\ saveAnimated(java.io.File)
comment78.text=\n\ Takes\ the\ current\ contents\ of\ the\ drawing\ panel\ and\ writes\ them\ to\n\ the\ given\ file.\n\ @param\ file\ the\ file\ to\ save\n\ @throws\ NullPointerException\ if\ filename\ is\ null\n\ @throws\ IOException\ if\ the\ given\ file\ cannot\ be\ written\n
comment79.params=filename
comment79.target=void\ saveAnimated(java.lang.String)
comment79.text=\n\ Takes\ the\ current\ contents\ of\ the\ drawing\ panel\ and\ writes\ them\ to\n\ the\ given\ file.\n\ @param\ filename\ name/path\ of\ the\ file\ to\ save\n\ @throws\ NullPointerException\ if\ filename\ is\ null\n\ @throws\ IOException\ if\ the\ given\ file\ cannot\ be\ written\n
comment8.params=name
comment8.target=java.lang.Boolean\ getPropertyBoolean(java.lang.String)
comment8.text=\n\ Returns\ the\ given\ Java\ system\ property\ as\ a\ Boolean.\n\ Note\ uppercase-B\ meaning\ that\ if\ the\ property\ isn't\ set,\ this\ will\ return\ null.\n\ That\ also\ means\ that\ if\ you\ call\ it\ and\ try\ to\ store\ as\ lowercase-B\ boolean\ and\n\ it's\ null,\ you\ will\ crash\ the\ program.\ \ You\ have\ been\ warned.\n
comment80.params=
comment80.target=void\ saveAs()
comment80.text=\n\ Called\ when\ the\ user\ presses\ the\ "Save\ As"\ menu\ item.\n\ Pops\ up\ a\ file\ chooser\ prompting\ the\ user\ to\ save\ their\ panel\ to\ an\ image.\n
comment81.params=
comment81.target=void\ saveAsAnimated()
comment81.text=\n\ Called\ when\ the\ user\ presses\ the\ "Save\ As"\ menu\ item\ on\ an\ animated\ panel.\n\ Pops\ up\ a\ file\ chooser\ prompting\ the\ user\ to\ save\ their\ panel\ to\ an\ image.\n
comment82.params=extension
comment82.target=java.lang.String\ saveAsHelper(java.lang.String)
comment82.text=\n\ A\ helper\ method\ to\ facilitate\ the\ Save\ As\ action\ for\ both\ animated\n\ and\ non-animated\ images.\n
comment83.params=
comment83.target=java.lang.String\ saveToTempFile()
comment83.text=\n\ Saves\ the\ drawing\ panel's\ image\ to\ a\ temporary\ file\ and\ returns\n\ that\ file's\ name.\n
comment84.params=alwaysOnTop
comment84.target=void\ setAlwaysOnTop(boolean)
comment84.text=\n\ Sets\ whether\ the\ panel\ will\ always\ cover\ other\ windows\ (default\ false).\n\ @param\ alwaysOnTop\ true\ if\ the\ panel\ should\ always\ cover\ other\ windows\n
comment85.params=antiAlias
comment85.target=void\ setAntiAlias(boolean)
comment85.text=\n\ Sets\ whether\ the\ panel\ should\ use\ anti-aliased\ /\ smoothed\ graphics\ (default\ true).\n\ @param\ antiAlias\ true\ if\ the\ panel\ should\ be\ smoothed\n
comment86.params=c
comment86.target=void\ setBackground(java.awt.Color)
comment86.text=\n\ Sets\ the\ background\ color\ of\ the\ drawing\ panel\ to\ be\ the\ given\ color.\n\ @param\ c\ color\ to\ use\ as\ background\n\ @throws\ NullPointerException\ if\ color\ is\ null\n
comment87.params=rgb
comment87.target=void\ setBackground(int)
comment87.text=\n\ Sets\ the\ background\ color\ of\ the\ drawing\ panel\ to\ be\ the\ color\n\ represented\ by\ the\ given\ RGB\ integer.\n\ @param\ rgb\ RGB\ integer\ to\ use\ as\ background\ color\ (full\ alpha\ assumed/applied)\n
comment88.params=gridLines
comment88.target=void\ setGridLines(boolean)
comment88.text=\n\ Enables\ or\ disables\ the\ drawing\ of\ grid\ lines\ on\ top\ of\ the\ image\ to\ help\n\ with\ debugging\ sizes\ and\ coordinates.\n\ By\ default\ the\ grid\ lines\ will\ be\ shown\ every\ 10\ pixels\ in\ each\ dimension.\n\ @param\ gridLines\ whether\ to\ show\ grid\ lines\ (true)\ or\ not\ (false)\n
comment89.params=gridLines\ pxGap
comment89.target=void\ setGridLines(boolean,\ int)
comment89.text=\n\ Enables\ or\ disables\ the\ drawing\ of\ grid\ lines\ on\ top\ of\ the\ image\ to\ help\n\ with\ debugging\ sizes\ and\ coordinates.\n\ The\ grid\ lines\ will\ be\ shown\ every\ pxGap\ pixels\ in\ each\ dimension.\n\ @param\ gridLines\ whether\ to\ show\ grid\ lines\ (true)\ or\ not\ (false)\n\ @param\ pxGap\ number\ of\ pixels\ between\ grid\ lines\n
comment9.params=
comment9.target=java.lang.String\ getSaveFileName()
comment9.text=\n\ Returns\ the\ file\ name\ used\ for\ saving\ all\ DrawingPanel\ instances.\n\ By\ default\ this\ is\ null,\ but\ it\ can\ be\ set\ using\ setSaveFileName\n\ or\ by\ setting\ the\ SAVE_PROPERTY\ env\ variable.\n\ @return\ the\ shared\ save\ file\ name\n
comment90.params=height
comment90.target=void\ setHeight(int)
comment90.text=\n\ Sets\ the\ drawing\ panel's\ height\ in\ pixels\ to\ the\ given\ value.\n\ After\ calling\ this\ method,\ the\ client\ must\ call\ getGraphics()\ again\n\ to\ get\ the\ new\ graphics\ context\ of\ the\ newly\ enlarged\ image\ buffer.\n\ @param\ height\ height,\ in\ pixels\n\ @throws\ IllegalArgumentException\ if\ height\ is\ negative\ or\ exceeds\ MAX_SIZE\n
comment91.params=x\ y\ color
comment91.target=void\ setPixel(int,\ int,\ java.awt.Color)
comment91.text=\n\ Sets\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ to\ be\ the\ given\ color.\n\ If\ the\ color\ is\ null,\ the\ call\ has\ no\ effect.\n\ @param\ x\ x-coordinate\ of\ pixel\ to\ set\n\ @param\ y\ y-coordinate\ of\ pixel\ to\ set\n\ @param\ color\ Color\ to\ set\ the\ pixel\ to\ use\n\ @throws\ IllegalArgumentException\ if\ x\ or\ y\ is\ out\ of\ bounds\n\ @throws\ NullPointerException\ if\ color\ is\ null\n
comment92.params=x\ y\ rgb
comment92.target=void\ setPixel(int,\ int,\ int)
comment92.text=\n\ Sets\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ to\ be\ the\ color\n\ represented\ by\ the\ given\ RGB\ integer.\n\ The\ passed\ RGB\ integer's\ alpha\ value\ is\ ignored\ and\ a\ full\ alpha\ of\ 255\n\ is\ always\ used\ here,\ to\ avoid\ common\ bugs\ with\ using\ a\ 0\ value\ for\ alpha.\n\ See\ also\:\ setPixel.\n\ See\ also\:\ setPixelRGB.\n\ @param\ x\ x-coordinate\ of\ pixel\ to\ set\n\ @param\ y\ y-coordinate\ of\ pixel\ to\ set\n\ @param\ rgb\ RGB\ integer\ representing\ the\ color\ to\ set\ the\ pixel\ to\ use\n\ @throws\ IllegalArgumentException\ if\ x\ or\ y\ is\ out\ of\ bounds\n
comment93.params=x\ y\ rgb
comment93.target=void\ setPixelRGB(int,\ int,\ int)
comment93.text=\n\ Sets\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ to\ be\ the\ color\n\ represented\ by\ the\ given\ RGB\ integer.\n\ The\ passed\ RGB\ integer's\ alpha\ value\ is\ ignored\ and\ a\ full\ alpha\ of\ 255\n\ is\ always\ used\ here,\ to\ avoid\ common\ bugs\ with\ using\ a\ 0\ value\ for\ alpha.\n\ See\ also\:\ setPixel.\n\ @param\ x\ x-coordinate\ of\ pixel\ to\ set\n\ @param\ y\ y-coordinate\ of\ pixel\ to\ set\n\ @param\ rgb\ RGB\ integer\ representing\ the\ color\ to\ set\ the\ pixel\ to\ use\n\ @throws\ IllegalArgumentException\ if\ x\ or\ y\ is\ out\ of\ bounds\n
comment94.params=pixels
comment94.target=void\ setPixels(java.awt.Color[][])
comment94.text=\n\ Sets\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ to\ the\ colors\n\ in\ the\ given\ 2-D\ array\ of\ Color\ objects.\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\n\ If\ the\ given\ array's\ dimensions\ do\ not\ match\ the\ width/height\ of\ the\n\ drawing\ panel,\ the\ panel\ is\ resized\ to\ match\ the\ array.\n\ If\ the\ pixel\ array\ is\ null\ or\ size\ 0,\ the\ call\ has\ no\ effect.\n\ If\ any\ rows\ or\ colors\ in\ the\ array\ are\ null,\ those\ pixels\ will\ be\ ignored.\n\ The\ 2-D\ array\ passed\ is\ assumed\ to\ be\ rectangular\ in\ length\ (not\ jagged).\n\ @param\ pixels\ 2D\ array\ of\ pixels\ (row-major)\n\ @throws\ NullPointerException\ if\ pixels\ array\ is\ null\n
comment95.params=pixels
comment95.target=void\ setPixels(int[][])
comment95.text=\n\ Sets\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ to\ the\ colors\n\ represented\ by\ the\ given\ 2-D\ array\ of\ RGB\ integers.\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\n\ If\ the\ given\ array's\ dimensions\ do\ not\ match\ the\ width/height\ of\ the\n\ drawing\ panel,\ the\ panel\ is\ resized\ to\ match\ the\ array.\n\ If\ the\ pixel\ array\ is\ null\ or\ size\ 0,\ the\ call\ has\ no\ effect.\n\ The\ 2-D\ array\ passed\ is\ assumed\ to\ be\ rectangular\ in\ length\ (not\ jagged).\n\ @param\ pixels\ 2D\ array\ of\ pixels\ (row-major)\n\ @throws\ NullPointerException\ if\ pixels\ array\ is\ null\n
comment96.params=pixels
comment96.target=void\ setPixelsRGB(int[][])
comment96.text=\n\ Sets\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ to\ the\ colors\n\ represented\ by\ the\ given\ 2-D\ array\ of\ RGB\ integers.\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\n\ If\ the\ given\ array's\ dimensions\ do\ not\ match\ the\ width/height\ of\ the\n\ drawing\ panel,\ the\ panel\ is\ resized\ to\ match\ the\ array.\n\ If\ the\ pixel\ array\ is\ null\ or\ size\ 0,\ the\ call\ has\ no\ effect.\n\ The\ 2-D\ array\ passed\ is\ assumed\ to\ be\ rectangular\ in\ length\ (not\ jagged).\n\ @param\ pixels\ 2D\ array\ of\ pixels\ (row-major)\n\ @throws\ NullPointerException\ if\ pixels\ array\ is\ null\n
comment97.params=width\ height
comment97.target=void\ setSize(int,\ int)
comment97.text=\n\ Sets\ the\ drawing\ panel's\ pixel\ size\ (width,\ height)\ to\ the\ given\ values.\n\ After\ calling\ this\ method,\ the\ client\ must\ call\ getGraphics()\ again\n\ to\ get\ the\ new\ graphics\ context\ of\ the\ newly\ enlarged\ image\ buffer.\n\ @param\ width\ width,\ in\ pixels\n\ @param\ height\ height,\ in\ pixels\n\ @throws\ IllegalArgumentException\ if\ width/height\ is\ negative\ or\ exceeds\ MAX_SIZE\n
comment98.params=text
comment98.target=void\ setStatusBarText(java.lang.String)
comment98.text=\n\ Sets\ the\ text\ that\ will\ appear\ in\ the\ drawing\ panel's\ bottom\ status\ bar.\n
comment99.params=
comment99.target=void\ setupMenuBar()
comment99.text=\n\ Initializes\ the\ drawing\ panel's\ menu\ bar\ items.\n
numComments=114
